version: "3.8"  # Устанавливаем версию формата файла Docker Compose (3.8).

services:  # Определяем сервисы (контейнеры), которые будут запущены в рамках приложения.
  cppcrow:  # Определяем сервис cppcrow (контейнер с сервером на Crow).
    container_name: cppcrow        # Устанавливаем имя контейнера (cppcrow).
    build: .                       # Строим контейнер с использованием Dockerfile, находящегося в текущей директории.
    tty: true                      # Устанавливаем флаг tty, чтобы контейнер оставался активным, даже если в нем нет активных процессов.
    command: "./build/server"      # Указываем команду, которая будет выполнена при запуске контейнера (запуск сервера).
    develop:                       # Определяем параметры для режима разработки (например, автозамена файлов).
      watch:
        - action: rebuild          # При изменении файлов в указанной директории будет выполняться пересборка контейнера.
          path: ./src              # Указываем путь к исходным файлам на хосте, которые должны быть отслеживаемы.
          target: /app/src         # Указываем путь в контейнере, куда должны монтироваться исходные файлы.
    ports:
      - 8080:8080                  # Прокси-порты: внешний порт 8080 на хосте будет направлен в контейнер на порт 8080.
    networks:
      - app-network                # Сетевое подключение к сети app-network, которая будет определена ниже.

  webserver:  # Определяем сервис webserver (контейнер с Nginx).
    container_name: webserver       # Устанавливаем имя контейнера (webserver).
    tty: true                       # Флаг tty для поддержания активного состояния контейнера.
    build:
      context: ./nginx              # Контекст сборки указывает на директорию ./nginx, где находится Dockerfile.
      dockerfile: Dockerfile        # Указываем путь к Dockerfile, который будет использоваться для сборки контейнера.
    ports:
      - 18080:80                   # Прокси-порты: внешний порт 18080 на хосте будет направлен в контейнер на порт 80.
    networks:
      - app-network                # Сетевое подключение к сети app-network.

networks: # Определяем сети, которые будут использоваться контейнерами.
  app-network: # Название сети.
    driver: bridge # Используем драйвер сети bridge, который создает локальную сеть между контейнерами.
